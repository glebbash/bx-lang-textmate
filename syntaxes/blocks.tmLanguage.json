{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "Blocks",
	"patterns": [
		{
			"include": "#all"
		}
	],
	"repository": {
		"all": {
			"patterns": [
				{
					"include": "#comments"
				},
				{
					"include": "#keywords"
				},
				{
					"include": "#operators"
				},
				{
					"include": "#types"
				},
				{
					"include": "#function-calls"
				},
				{
					"include": "#parens"
				},
				{
					"include": "#braces"
				},
				{
					"include": "#brackets"
				},
				{
					"include": "#strings"
				},
				{
					"include": "#numbers"
				}
			]
		},
		"comments": {
			"patterns": [
				{
					"name": "comment.line.double-slash.blocks",
					"begin": "//",
					"end": "\n"
				},
				{
					"include": "#ml-comments"
				}
			]
		},
		"ml-comments": {
			"name": "comment.block.blocks",
			"begin": "/\\*",
			"end": "\\*/",
			"patterns": [
				{
					"include": "#ml-comments"
				}
			]
		},
		"types": {
			"name": "entity.name.type.blocks",
			"match": "\\b([A-Z][A-Za-z0-9_]*)\\b"
		},
		"function-calls": {
			"match": "([A-Za-z0-9_]+)(?:\\()",
			"captures": {
				"1": {
					"name": "entity.name.function.blocks"
				}
			}
		},
		"keywords": {
			"patterns": [
				{
					"name": "keyword.control.blocks",
					"match": "(?<!\\.)\\b(if|else|while|for|break|continue|fun|return|gen|yield|async|await|in|is|class|import|export|and|or)\\b"
				},
				{
					"name": "storage.type.blocks",
					"match": "(?<!\\.)\\b(let|const)\\b"
				},
				{
					"name": "variable.language",
					"match": "(?<!\\.)\\b(self)\\b"
				},
				{
					"name": "constant.language",
					"match": "(?<!\\.)\\b(true|false)\\b"
				}
			]
		},
		"strings": {
			"patterns": [
				{
					"name": "string.quoted.double.blocks",
					"begin": "\"",
					"end": "\"",
					"patterns": [
						{
							"name": "constant.character.escape.blocks",
							"match": "\\\\."
						}
					]
				},
				{
					"name": "string.quoted.single.blocks",
					"begin": "'",
					"end": "'",
					"patterns": [
						{
							"name": "constant.character.escape.blocks",
							"match": "\\\\."
						}
					]
				}
			]
		},
		"parens": {
			"begin": "\\(",
			"end": "\\)",
			"beginCaptures": {
				"0": {
					"name": "punctuation.paren.open.blocks"
				}
			},
			"endCaptures": {
				"0": {
					"name": "punctuation.paren.close.blocks"
				}
			},
			"name": "expression.group",
			"patterns": [
				{
					"include": "#all"
				}
			]
		},
		"braces": {
			"begin": "\\{",
			"end": "\\}",
			"beginCaptures": {
				"0": {
					"name": "punctuation.paren.open"
				}
			},
			"endCaptures": {
				"0": {
					"name": "punctuation.paren.close"
				}
			},
			"name": "expression.group",
			"patterns": [
				{
					"include": "#all"
				}
			]
		},
		"brackets": {
			"begin": "\\[",
			"end": "\\]",
			"beginCaptures": {
				"0": {
					"name": "punctuation.paren.open"
				}
			},
			"endCaptures": {
				"0": {
					"name": "punctuation.paren.close"
				}
			},
			"name": "expression.group",
			"patterns": [
				{
					"include": "#all"
				}
			]
		},
		"numbers": {
			"match": "(?<!\\w)[\\+\\-]?[0-9][0-9_]*(?:\\.[0-9][0-9_]*)?\\b",
			"name": "constant.numeric"
		},
		"operators": {
			"patterns": [
				{
					"name": "keyword.control.operator.blocks",
					"match": "\\+|-|\\*|/|%|\\^|==|\\!=|>|<|>=|<=|\\.\\.|\\.|::|:|=|\\+=|-=|\\*=|/=|%=|\\^=|\\!"
				}
			]
		}
	},
	"scopeName": "source.blocks"
}